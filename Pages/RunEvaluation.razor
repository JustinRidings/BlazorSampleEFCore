@page "/runs/{RunId:int}";
@* https://docs.microsoft.com/en-us/aspnet/core/blazor/fundamentals/routing?view=aspnetcore-3.1 *@
@using BangTestDemo2.Data;
@using BangTestDemo2.Data.Models;
@inject SqlDbContext context;
@* inject is called above so that we use our DB Context that is initialized when the WebApp is initialized *@

<h3>RunEvaluation</h3>

@if (shouldRenderRun)
{
    <table style="vertical-align:central">
        <thead>
            <tr>
                <td>RunId</td>
                <td>Base Package ID</td>
                <td>Base Package Name</td>
                <td>Comparison Package ID</td>
                <td>Comparison Package Name</td>
                <td>Cabset Name </td>
                <td>Total Cab Count</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@currentRun.RunId</td>
                <td>@currentRun.BasePackageId</td>
                <td>@currentRun.BasePackageName</td>
                <td>@currentRun.ComparisonPackageId</td>
                <td>@currentRun.ComparisonPackageName</td>
                <td>@currentRun.CabsetName</td>
                <td>@currentRun.TotalCabCount</td>
            </tr>
        </tbody>
    </table>
}

@if (shouldRenderCabs)
{
    <br />
    <table>
        <thead>
            <tr>
                <td>Cabset Id</td>
                <td>Cabset Name</td>
                <td>Cab Types</td>
                <td>Cab Count</td>
                <td>Created Date</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@runCabset.CabsetId</td>
                <td>@runCabset.CabsetName</td>
                <td>@runCabset.CabTypes</td>
                <td>@runCabset.CabCount</td>
                <td>@runCabset.CreatedDate</td>
            </tr>
        </tbody>
    </table>
    <br />
}

@if (shouldRenderBasePackage)
{
    <table>
        <thead>
            <tr>
                <td>Base Package ID</td>
                <td>Base Package Name</td>
                <td>Base Package Type</td>
                <td>Base Package Location</td>
                <td>Base Package Filecount</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@basePackage.PackageId</td>
                <td>@basePackage.PackageName</td>
                <td>@basePackage.PackageType</td>
                <td>@basePackage.PackageLocation</td>
                <td>@basePackage.PackageFileCount</td>
            </tr>
        </tbody>
    </table>
    <br />
}

@if (shouldRenderCompPackage)
{
    <table>
        <thead>
            <tr>
                <td>Comparison Package ID</td>
                <td>Comparison Package Name</td>
                <td>Comparison Package Type</td>
                <td>Comparison Package Location</td>
                <td>Comparison Package Filecount</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@comparisonPackage.PackageId</td>
                <td>@comparisonPackage.PackageName</td>
                <td>@comparisonPackage.PackageType</td>
                <td>@comparisonPackage.PackageLocation</td>
                <td>@comparisonPackage.PackageFileCount</td>
            </tr>
        </tbody>
    </table>
}

@code {
    // Use RunId as parameter on-load from route

    [Parameter]
    public int RunId { get; set; }

    // Initialize page object properties

    public Run currentRun { get; set; }
    public CabSet runCabset { get; set; }
    public Package basePackage { get; set; }
    public Package comparisonPackage { get; set; }

    // UI Booleans to avoid ObjectNotInitialized exceptions
    // on page-load

    public bool shouldRenderRun = false;
    public bool shouldRenderCabs = false;
    public bool shouldRenderBasePackage = false;
    public bool shouldRenderCompPackage = false;


    // To-Do: Investigate Task.WhenAll() as implementation
    // for DB tasks. Parallelism is great :)
    protected override async Task OnInitializedAsync()
    {
        // Populate the Run first, as other
        // data is centered around it

        await PopulateRun();

        // Assuming we populate the run,
        // flip the UI boolean and notify
        // of StateChanged for page refresh

        if (currentRun != null)
        {
            shouldRenderRun = true;

            // This is a 'tribal knowledge' implementation
            // of calling the this.StateHasChanged() method.
            // We invoke so that the current thread calls
            // the method, instead of launching a seperate
            // task on a seperate thread, that has to wait
            // for an object lock to release

            await InvokeAsync(StateHasChanged);
        }
        await PopulateCabset();
        if (runCabset != null)
        {
            shouldRenderCabs = true;
            await InvokeAsync(StateHasChanged);
        }
        await PopulateBasePackage();
        if (basePackage != null)
        {
            shouldRenderBasePackage = true;
            await InvokeAsync(StateHasChanged);
        }
        await PopulateComparisonPackage();
        if (comparisonPackage != null)
        {
            shouldRenderCompPackage = true;
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task PopulateRun()
    {
        currentRun = await context.GetRunById(RunId);
    }

    public async Task PopulateCabset()
    {
        runCabset = await context.GetCabsetById(currentRun.CabsetId);
    }

    public async Task PopulateBasePackage()
    {
        basePackage = await context.GetPackageById(currentRun.BasePackageId);
    }

    public async Task PopulateComparisonPackage()
    {
        comparisonPackage = await context.GetPackageById(currentRun.ComparisonPackageId);
    }
}
